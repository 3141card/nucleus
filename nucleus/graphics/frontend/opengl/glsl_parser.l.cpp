#line 2 "glsl_parser.l.cpp"
#line 20 "glsl_parser.l"
/**
 * (c) 2014-2016 Alexandro Sanchez Bach. All rights reserved.
 * Released under GPL v2 license. Read LICENSE for more details.
 *
 * Warning:
 *  - This is an automatically generated file.
 *
 * Based on:
 *  - ANGLE:
 *    - The ANGLE Project Authors (2002-2013)
 *  - ANSI C Yacc grammar:
 *    - Jeff Lee (1985)
 *    - Jutta Degener (1995)
 */

#include "nucleus/common.h"
#include "nucleus/graphics/frontend/opengl/glsl_parser.y.hpp"

// Ignore errors in auto-generated code
#if defined(NUCLEUS_COMPILER_GCC)
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wswitch-enum"

#elif defined(NUCLEUS_COMPILER_MSVC)
#pragma warning(disable: 4005)
#pragma warning(disable: 4065)
#pragma warning(disable: 4102)
#pragma warning(disable: 4189)
#pragma warning(disable: 4244)
#pragma warning(disable: 4505)
#pragma warning(disable: 4701)
#pragma warning(disable: 4702)
#endif




#line 42 "glsl_parser.l.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[467] =
    {   0,
        0,    0,    0,    0,  166,  164,  163,  163,  148,  154,
      159,  143,  144,  152,  151,  140,  149,  147,  153,  106,
      106,  141,  137,  155,  142,  156,  160,  103,  145,  146,
      158,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  138,  157,  139,  150,  162,  165,  161,  134,  120,
      139,  128,  123,  118,  126,  116,  127,  117,  112,  119,
      111,  105,  106,    0,  109,    0,  146,  138,  145,  135,
      131,  133,  132,  136,  103,  124,  130,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,   12,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   15,   24,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  125,  129,  161,    0,  115,
      111,    0,  114,  108,    0,  110,  104,  121,  122,   65,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   13,
      103,  103,  103,  103,  103,  103,  103,  103,   28,  103,
      103,  103,  103,  103,  103,  103,  103,  103,   25,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,    0,  112,    0,  111,  113,
      107,  103,   31,  103,  103,   18,  100,  103,  103,  103,
      103,  103,  103,  103,  103,   16,   68,  103,  103,  103,
       22,  103,  103,   72,   84,  103,  103,  103,  103,  103,
      103,  103,  103,  103,   81,    4,   51,   52,   53,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,   71,   32,  103,   29,
      103,  103,  103,  103,  103,  103,   45,   46,   47,   30,

      103,  103,  103,   10,   36,   37,   38,  103,   66,    7,
      103,  103,  103,  103,   48,   49,   50,  103,   33,   85,
       27,   93,   94,   95,    2,   90,   91,   92,  103,   26,
       88,  103,  103,   39,   40,   41,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   82,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   67,
      103,  102,   42,   43,   44,  103,  103,   14,  103,  103,
      103,  103,  103,   83,   78,   73,  103,  103,   63,   54,
       55,   56,   57,   58,   59,   60,   61,   62,  103,  103,
      103,   89,   64,  103,   76,   35,  103,   99,   23,   77,

       20,   87,   17,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   19,   34,  103,  103,  103,    3,  103,  103,
      103,  103,  103,   69,    8,  103,    9,  103,  103,   21,
       11,   79,  103,  103,  103,   74,  103,  103,  103,   70,
       86,   75,    6,   80,    1,  101,    5,   96,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   97,
      103,  103,  103,  103,   98,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    1,    1,    5,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   28,   28,   29,   30,   31,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   33,   34,   32,   35,   32,   32,   36,   32,   32,
       37,    1,   38,   39,   32,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   32,   49,   50,   51,   52,
       53,   54,   32,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    1,    3,    3,    2,
        2,    4,    4,    4,    4,    4,    1,    1,    1,    3,
        3,    3,    3,    2,    2,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[472] =
    {   0,
        0,    0,   67,    0,  654,  655,  655,  655,  628,  110,
      131,  655,  655,  627,  128,  655,  127,  125,  626,  144,
      193,  624,  655,  144,  624,  122,  655,    0,  655,  655,
      133,   94,  118,  141,  134,  134,  167,  595,  176,  131,
      114,  152,  178,  589,  164,  602,  185,  194,  196,  206,
      598,  655,  164,  655,  655,  655,  655,    0,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  209,  655,
      227,  225,    0,  258,  655,    0,  655,  655,  655,  619,
      655,  655,  655,  618,    0,  655,  655,  591,  584,  587,
      595,  594,  581,  584,  595,  582,  588,  576,  573,  586,

      573,  570,  570,  576,  564,  181,  569,  579,  565,  571,
      574,  575,    0,  231,  574,  555,  235,  559,  572,  563,
      565,  555,  569,  566,  568,  551,  556,  553,  542,  551,
      115,  549,  554,  550,  552,  541,  544,  545,  241,  548,
      551,  539,  551,  149,  544,  655,  655,    0,  284,  655,
      262,  298,  655,  655,  305,  312,  140,  655,  655,    0,
      536,  540,  549,  546,  223,  530,  530,  144,  545,  542,
      542,  540,  537,  529,  535,  522,  533,  519,  535,    0,
      532,  520,  527,  524,  528,  521,  510,  509,  522,  525,
      522,  510,  516,  507,  245,  512,  515,  506,  503,  507,

      513,  504,  495,  498,  496,  506,  496,  491,  489,  502,
      488,  490,  487,  498,  497,  483,  289,  491,  486,  495,
      474,  318,  492,  494,  483,  329,  343,  350,  360,  655,
      655,  484,    0,  482,  321,    0,    0,  475,  473,  471,
      479,  468,  485,  474,  334,    0,    0,  468,  478,  478,
        0,  463,  337,    0,    0,  465,  365,  466,  460,  459,
      460,  459,  368,  455,    0,    0,  451,  450,  449,  451,
      452,  457,  448,  461,  456,  455,  447,  451,  443,  446,
      441,  449,  454,  440,  452,  443,    0,    0,  449,    0,
      438,  438,  443,  442,  375,  439,    0,    0,    0,    0,

      429,  441,  443,    0,    0,    0,    0,  430,    0,    0,
      430,  431,  425,  435,    0,    0,    0,  426,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  433,    0,
        0,  431,  427,    0,    0,    0,  417,  378,  381,  384,
      422,  418,  423,  413,  426,  412,  425,  414,  421,    0,
      419,  416,  420,  404,  406,  412,  418,  413,  401,    0,
      403,    0,    0,    0,    0,  402,  405,    0,  394,  403,
      392,  392,  405,    0,  407,    0,  406,  405,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  390,  403,
      390,    0,    0,  393,    0,    0,  385,    0,    0,    0,

        0,    0,    0,  382,  393,  386,  392,  389,  384,  376,
      389,  387,    0,    0,  380,  387,  376,    0,  385,  382,
      372,  249,  380,    0,    0,  380,    0,  378,  377,    0,
        0,    0,  376,  362,  374,    0,  365,  387,  386,    0,
        0,    0,    0,    0,    0,    0,    0,  380,  371,  343,
      345,  333,  330,  298,  255,  258,  275,  238,  244,    0,
      242,  226,  194,  170,    0,  655,  404,  407,  225,  201,
      410
    } ;

static yyconst flex_int16_t yy_def[472] =
    {   0,
      466,    1,  466,    3,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  467,  466,  466,
      466,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  466,  466,  466,  466,  466,  466,  468,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  469,  466,
      470,   20,   21,  466,  466,  471,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  466,  466,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  466,  466,  468,  466,  466,
      470,  466,  466,  466,  466,  466,  471,  466,  466,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  466,  466,  466,  466,  466,
      466,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,    0,  466,  466,  466,  466,
      466
    } ;

static yyconst flex_int16_t yy_nxt[723] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   21,   21,   21,   21,
       21,   22,   23,   24,   25,   26,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   28,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       28,   28,   28,   52,   53,   54,   55,    6,   56,   57,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,   58,   58,   58,   58,   58,   58,

       58,   58,   58,    6,    6,    6,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
        6,    6,    6,    6,   60,   61,   62,   65,   67,   69,
       69,   69,   69,   69,   69,   69,   83,   84,   78,   88,
       89,   68,   66,  116,  208,   63,   71,   86,   72,   72,
       72,   72,   72,   72,   73,   79,  117,   80,   81,  209,
       90,   87,   91,   74,  231,  113,   92,   97,   75,   76,
       93,   98,  114,  101,   94,  102,   99,   74,  146,  115,
       95,  118,  100,   96,  103,  119,  223,  231,  224,  240,

      241,   75,  151,  123,   76,   71,  104,   73,   73,   73,
       73,   73,   73,   73,  105,  110,  106,  120,  124,  107,
      178,  125,   74,  111,  127,  108,   69,   75,  147,  465,
      121,  128,  129,  179,  112,  130,   74,  134,  149,  150,
      135,  131,  132,  138,  133,  142,  464,  139,  136,  143,
       75,  140,  149,  150,  141,  137,  152,  153,  144,  154,
      466,  267,  268,  269,  438,  439,  236,  155,  463,  155,
      152,  153,  156,  156,  156,  156,  156,  156,  156,  237,
      186,  462,  154,  187,  188,  466,  193,  189,  217,  190,
      461,  152,  153,  226,  194,  226,  218,  460,  227,  227,

      227,  227,  227,  227,  227,  152,  153,  228,  459,  228,
      458,  457,  229,  229,  229,  229,  229,  229,  229,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  291,  297,  298,  299,  305,  306,  307,
      456,  292,  230,  227,  227,  227,  227,  227,  227,  227,
      315,  316,  317,  322,  323,  324,  230,  227,  227,  227,
      227,  227,  227,  227,  229,  229,  229,  229,  229,  229,
      229,  455,  454,  150,  229,  229,  229,  229,  229,  229,
      229,  326,  327,  328,  334,  335,  336,  150,  453,  452,
      153,  363,  364,  365,  380,  381,  382,  383,  384,  385,

      386,  387,  388,  451,  153,   85,   85,   85,  148,  148,
      148,  157,  157,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,

      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  333,  332,  331,  330,  329,  325,  321,
      320,  319,  318,  314,  313,  312,  311,  310,  309,  308,
      304,  303,  302,  301,  300,  296,  295,  294,  293,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  239,  238,  235,  234,  233,
      232,  225,  222,  221,  220,  219,  216,  215,  214,  213,

      212,  211,  210,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  192,  191,  185,  184,
      183,  182,  181,  180,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  145,  126,  122,  109,   82,   77,
       70,   64,   59,  466,    5,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466
    } ;

static yyconst flex_int16_t yy_chk[723] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   10,   10,   11,   15,   17,   18,
       18,   18,   18,   18,   18,   18,   26,   26,   24,   32,
       32,   17,   15,   41,  131,   11,   20,   31,   20,   20,
       20,   20,   20,   20,   20,   24,   41,   24,   24,  131,
       33,   31,   33,   20,  157,   40,   33,   35,   20,   20,
       34,   35,   40,   36,   34,   36,   35,   20,   53,   40,
       34,   42,   35,   34,   36,   42,  144,  157,  144,  168,

      168,   20,  470,   45,   20,   21,   37,   21,   21,   21,
       21,   21,   21,   21,   37,   39,   37,   43,   45,   37,
      106,   45,   21,   39,   47,   37,  469,   21,   53,  464,
       43,   47,   47,  106,   39,   47,   21,   48,   69,   69,
       48,   47,   47,   49,   47,   50,  463,   49,   48,   50,
       21,   49,   69,   69,   49,   48,   71,   71,   50,   72,
       72,  195,  195,  195,  422,  422,  165,   74,  462,   74,
       71,   71,   74,   74,   74,   74,   74,   74,   74,  165,
      114,  461,   72,  114,  114,   72,  117,  114,  139,  114,
      459,  151,  151,  149,  117,  149,  139,  458,  149,  149,

      149,  149,  149,  149,  149,  151,  151,  152,  457,  152,
      456,  455,  152,  152,  152,  152,  152,  152,  152,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  217,  222,  222,  222,  235,  235,  235,
      454,  217,  156,  226,  226,  226,  226,  226,  226,  226,
      245,  245,  245,  253,  253,  253,  156,  227,  227,  227,
      227,  227,  227,  227,  228,  228,  228,  228,  228,  228,
      228,  453,  452,  227,  229,  229,  229,  229,  229,  229,
      229,  257,  257,  257,  263,  263,  263,  227,  451,  450,
      229,  295,  295,  295,  338,  338,  338,  339,  339,  339,

      340,  340,  340,  449,  229,  467,  467,  467,  468,  468,
      468,  471,  471,  448,  439,  438,  437,  435,  434,  433,
      429,  428,  426,  423,  421,  420,  419,  417,  416,  415,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  397,
      394,  391,  390,  389,  378,  377,  375,  373,  372,  371,
      370,  369,  367,  366,  361,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  337,  333,  332,  329,  318,  314,  313,
      312,  311,  308,  303,  302,  301,  296,  294,  293,  292,
      291,  289,  286,  285,  284,  283,  282,  281,  280,  279,

      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  264,  262,  261,  260,  259,  258,  256,  252,
      250,  249,  248,  244,  243,  242,  241,  240,  239,  238,
      234,  232,  225,  224,  223,  221,  220,  219,  218,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  167,  166,  164,  163,  162,
      161,  145,  143,  142,  141,  140,  138,  137,  136,  135,

      134,  133,  132,  130,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  116,  115,  112,  111,
      110,  109,  108,  107,  105,  104,  103,  102,  101,  100,
       99,   98,   97,   96,   95,   94,   93,   92,   91,   90,
       89,   88,   84,   80,   51,   46,   44,   38,   25,   22,
       19,   14,    9,    5,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[166] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "glsl_parser.l"
/**
 * (c) 2014-2016 Alexandro Sanchez Bach. All rights reserved.
 * Released under GPL v2 license. Read LICENSE for more details.
 *
 * Based on:
 *  - ANGLE:
 *    - The ANGLE Project Authors (2002-2013)
 *  - ANSI C Yacc grammar:
 *    - Jeff Lee (1985)
 *    - Jutta Degener (1995)
 */
#define YY_NO_UNISTD_H 1

#line 58 "glsl_parser.l"
	namespace gfx {
	namespace frontend {
	namespace opengl {

	struct YYLTYPE {
        int first_file;
        int first_line;
        int last_file;
        int last_line;
    };

	// Workaround for flex using the register keyword, deprecated in C++11.
	#ifdef __cplusplus
	#if __cplusplus > 199711L
	#define register
	#endif
	#endif

	#define YY_USER_ACTION                                 \
		yylloc->first_file = yylloc->last_file = yycolumn; \
		yylloc->first_line = yylloc->last_line = yylineno;

	#define YY_INPUT(buf, result, max_size) \
		result = string_input(buf, max_size, yyscanner);

	static yy_size_t string_input(char* buf, yy_size_t max_size, yyscan_t yyscanner);
	static int check_type(yyscan_t yyscanner);
	static int reserved_word(yyscan_t yyscanner);
	static int uint_constant();
	static int int_constant();
	static int float_constant(yyscan_t yyscanner);
	static int floatsuffix_check();

#line 867 "glsl_parser.l.cpp"

#define INITIAL 0
#define FIELDS 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE void*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	{
#line 100 "glsl_parser.l"



    //TParseContext* context = yyextra;


#line 1147 "glsl_parser.l.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 467 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 466 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 106 "glsl_parser.l"
{ return INVARIANT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 107 "glsl_parser.l"
{ return HIGH_PRECISION; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "glsl_parser.l"
{ return MEDIUM_PRECISION; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 109 "glsl_parser.l"
{ return LOW_PRECISION; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 110 "glsl_parser.l"
{ return PRECISION; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 112 "glsl_parser.l"
{ return ATTRIBUTE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 113 "glsl_parser.l"
{ return CONST_QUAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 114 "glsl_parser.l"
{ return UNIFORM; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 115 "glsl_parser.l"
{ return VARYING; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "glsl_parser.l"
{ return BREAK; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "glsl_parser.l"
{ return CONTINUE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "glsl_parser.l"
{ return DO; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "glsl_parser.l"
{ return FOR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "glsl_parser.l"
{ return WHILE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "glsl_parser.l"
{ return IF; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "glsl_parser.l"
{ return ELSE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "glsl_parser.l"
{ return SWITCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "glsl_parser.l"
{ return CASE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "glsl_parser.l"
{ return DEFAULT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "glsl_parser.l"
{ return STRUCT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "glsl_parser.l"
{ return CENTROID; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 130 "glsl_parser.l"
{ return FLAT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 131 "glsl_parser.l"
{ return SMOOTH; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "glsl_parser.l"
{ return IN_QUAL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "glsl_parser.l"
{ return OUT_QUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "glsl_parser.l"
{ return INOUT_QUAL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 137 "glsl_parser.l"
{ return FLOAT_TYPE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 138 "glsl_parser.l"
{ return INT_TYPE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 139 "glsl_parser.l"
{ return UINT_TYPE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 140 "glsl_parser.l"
{ return VOID_TYPE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 141 "glsl_parser.l"
{ return BOOL_TYPE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 142 "glsl_parser.l"
{ yylval->lex.b = true;  return BOOLCONSTANT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "glsl_parser.l"
{ yylval->lex.b = false; return BOOLCONSTANT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "glsl_parser.l"
{ return DISCARD; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "glsl_parser.l"
{ return RETURN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 148 "glsl_parser.l"
{ return BVEC2; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 149 "glsl_parser.l"
{ return BVEC3; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 150 "glsl_parser.l"
{ return BVEC4; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 151 "glsl_parser.l"
{ return IVEC2; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 152 "glsl_parser.l"
{ return IVEC3; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 153 "glsl_parser.l"
{ return IVEC4; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 154 "glsl_parser.l"
{ return UVEC2; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 155 "glsl_parser.l"
{ return UVEC3; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 156 "glsl_parser.l"
{ return UVEC4; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 157 "glsl_parser.l"
{ return VEC2; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 158 "glsl_parser.l"
{ return VEC3; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 159 "glsl_parser.l"
{ return VEC4; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 160 "glsl_parser.l"
{ return DVEC2; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 161 "glsl_parser.l"
{ return DVEC3; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 162 "glsl_parser.l"
{ return DVEC4; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "glsl_parser.l"
{ return MAT2; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "glsl_parser.l"
{ return MAT3; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "glsl_parser.l"
{ return MAT4; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "glsl_parser.l"
{ return MAT2x2; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "glsl_parser.l"
{ return MAT2x3; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "glsl_parser.l"
{ return MAT2x4; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "glsl_parser.l"
{ return MAT3x2; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 171 "glsl_parser.l"
{ return MAT3x3; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 172 "glsl_parser.l"
{ return MAT3x4; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 173 "glsl_parser.l"
{ return MAT4x2; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "glsl_parser.l"
{ return MAT4x3; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "glsl_parser.l"
{ return MAT4x4; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 177 "glsl_parser.l"
{ return LAYOUT; }
	YY_BREAK
/* Reserved keywords in GLSL ES 1.00 that are not reserved in GLSL ES 3.00 */
case 64:
YY_RULE_SETUP
#line 180 "glsl_parser.l"
{
    if (context->getShaderVersion() >= 300)
    {
        yylval->lex.string = NewPoolTString(yytext);
        return check_type(yyscanner);
    }

    return reserved_word(yyscanner);
}
	YY_BREAK
/* Reserved keywords */
case 65:
#line 192 "glsl_parser.l"
case 66:
#line 194 "glsl_parser.l"
case 67:
#line 195 "glsl_parser.l"
case 68:
#line 196 "glsl_parser.l"
case 69:
#line 197 "glsl_parser.l"
case 70:
#line 198 "glsl_parser.l"
case 71:
#line 199 "glsl_parser.l"
case 72:
#line 201 "glsl_parser.l"
case 73:
#line 203 "glsl_parser.l"
case 74:
#line 204 "glsl_parser.l"
case 75:
#line 205 "glsl_parser.l"
case 76:
#line 206 "glsl_parser.l"
case 77:
#line 207 "glsl_parser.l"
case 78:
#line 208 "glsl_parser.l"
case 79:
#line 209 "glsl_parser.l"
case 80:
#line 210 "glsl_parser.l"
case 81:
#line 212 "glsl_parser.l"
case 82:
#line 213 "glsl_parser.l"
case 83:
#line 214 "glsl_parser.l"
case 84:
#line 215 "glsl_parser.l"
case 85:
#line 216 "glsl_parser.l"
case 86:
#line 217 "glsl_parser.l"
case 87:
#line 218 "glsl_parser.l"
case 88:
#line 220 "glsl_parser.l"
case 89:
#line 221 "glsl_parser.l"
case 90:
#line 223 "glsl_parser.l"
case 91:
#line 224 "glsl_parser.l"
case 92:
#line 225 "glsl_parser.l"
case 93:
#line 226 "glsl_parser.l"
case 94:
#line 227 "glsl_parser.l"
case 95:
#line 228 "glsl_parser.l"
case 96:
#line 230 "glsl_parser.l"
case 97:
#line 231 "glsl_parser.l"
case 98:
#line 232 "glsl_parser.l"
case 99:
#line 234 "glsl_parser.l"
case 100:
#line 235 "glsl_parser.l"
case 101:
#line 237 "glsl_parser.l"
case 102:
YY_RULE_SETUP
#line 237 "glsl_parser.l"
{ return reserved_word(yyscanner); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "glsl_parser.l"
{
   yylval->lex.string = NewPoolTString(yytext); 
   return check_type(yyscanner);
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 244 "glsl_parser.l"
{ return int_constant(context); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 245 "glsl_parser.l"
{ return int_constant(context); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 246 "glsl_parser.l"
{ return int_constant(context); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 248 "glsl_parser.l"
{ return uint_constant(context); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 249 "glsl_parser.l"
{ return uint_constant(context); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 250 "glsl_parser.l"
{ return uint_constant(context); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 252 "glsl_parser.l"
{ return float_constant(yyscanner); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 253 "glsl_parser.l"
{ return float_constant(yyscanner); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 254 "glsl_parser.l"
{ return float_constant(yyscanner); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 256 "glsl_parser.l"
{ return floatsuffix_check(context); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 257 "glsl_parser.l"
{ return floatsuffix_check(context); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 258 "glsl_parser.l"
{ return floatsuffix_check(context); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 260 "glsl_parser.l"
{ return ADD_ASSIGN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 261 "glsl_parser.l"
{ return SUB_ASSIGN; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 262 "glsl_parser.l"
{ return MUL_ASSIGN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 263 "glsl_parser.l"
{ return DIV_ASSIGN; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 264 "glsl_parser.l"
{ return MOD_ASSIGN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 265 "glsl_parser.l"
{ return LEFT_ASSIGN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 266 "glsl_parser.l"
{ return RIGHT_ASSIGN; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 267 "glsl_parser.l"
{ return AND_ASSIGN; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 268 "glsl_parser.l"
{ return XOR_ASSIGN; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 269 "glsl_parser.l"
{ return OR_ASSIGN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 271 "glsl_parser.l"
{ return INC_OP; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 272 "glsl_parser.l"
{ return DEC_OP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 273 "glsl_parser.l"
{ return AND_OP; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 274 "glsl_parser.l"
{ return OR_OP; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 275 "glsl_parser.l"
{ return XOR_OP; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 276 "glsl_parser.l"
{ return LE_OP; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 277 "glsl_parser.l"
{ return GE_OP; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 278 "glsl_parser.l"
{ return EQ_OP; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 279 "glsl_parser.l"
{ return NE_OP; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 280 "glsl_parser.l"
{ return LEFT_OP; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 281 "glsl_parser.l"
{ return RIGHT_OP; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 282 "glsl_parser.l"
{ return SEMICOLON; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 283 "glsl_parser.l"
{ return LEFT_BRACE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 284 "glsl_parser.l"
{ return RIGHT_BRACE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 285 "glsl_parser.l"
{ return COMMA; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 286 "glsl_parser.l"
{ return COLON; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 287 "glsl_parser.l"
{ return EQUAL; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 288 "glsl_parser.l"
{ return LEFT_PAREN; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 289 "glsl_parser.l"
{ return RIGHT_PAREN; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 290 "glsl_parser.l"
{ return LEFT_BRACKET; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 291 "glsl_parser.l"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 292 "glsl_parser.l"
{ BEGIN(FIELDS); return DOT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 293 "glsl_parser.l"
{ return BANG; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 294 "glsl_parser.l"
{ return DASH; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 295 "glsl_parser.l"
{ return TILDE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 296 "glsl_parser.l"
{ return PLUS; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 297 "glsl_parser.l"
{ return STAR; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 298 "glsl_parser.l"
{ return SLASH; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 299 "glsl_parser.l"
{ return PERCENT; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 300 "glsl_parser.l"
{ return LEFT_ANGLE; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 301 "glsl_parser.l"
{ return RIGHT_ANGLE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 302 "glsl_parser.l"
{ return VERTICAL_BAR; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 303 "glsl_parser.l"
{ return CARET; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 304 "glsl_parser.l"
{ return AMPERSAND; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 305 "glsl_parser.l"
{ return QUESTION; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 307 "glsl_parser.l"
{
    BEGIN(INITIAL);
    yylval->lex.string = NewPoolTString(yytext);
    return FIELD_SELECTION;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 312 "glsl_parser.l"
{}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 314 "glsl_parser.l"
{ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FIELDS):
#line 315 "glsl_parser.l"
{ yyterminate(); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 316 "glsl_parser.l"
{ assert(false); return 0; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 318 "glsl_parser.l"
ECHO;
	YY_BREAK
#line 1949 "glsl_parser.l.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 467 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 467 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 466);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 318 "glsl_parser.l"



yy_size_t string_input(char* buf, yy_size_t max_size, yyscan_t yyscanner) {
    pp::Token token;
    yyget_extra(yyscanner)->getPreprocessor().lex(&token);
    yy_size_t len = token.type == pp::Token::LAST ? 0 : token.text.size();
    if (len < max_size)
        memcpy(buf, token.text.c_str(), len);
    yyset_column(token.location.file,yyscanner);
    yyset_lineno(token.location.line,yyscanner);

    if (len >= max_size)
        YY_FATAL_ERROR("Input buffer overflow");
    else if (len > 0)
        buf[len++] = ' ';
    return len;
}

int check_type(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    
    int token = IDENTIFIER;
    TSymbol* symbol = yyextra->symbolTable.find(yytext, yyextra->getShaderVersion());
    if (symbol && symbol->isVariable()) {
        TVariable* variable = static_cast<TVariable*>(symbol);
        if (variable->isUserType()) {
            token = TYPE_NAME;
        }
    }
    yylval->lex.symbol = symbol;
    return token;
}

int reserved_word(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    yyextra->error(*yylloc, "Illegal use of reserved word", yytext, "");
    yyextra->recover();
    return 0;
}

int uint_constant(TParseContext *context)
{
    struct yyguts_t* yyg = (struct yyguts_t*) context->getScanner();

    if (context->getShaderVersion() < 300)
    {
        context->error(*yylloc, "Unsigned integers are unsupported prior to GLSL ES 3.00", yytext, "");
        context->recover();
        return 0;
    }

    if (!atoi_clamp(yytext, &(yylval->lex.u)))
        yyextra->error(*yylloc, "Integer overflow", yytext, "");

    return UINTCONSTANT;
}

int floatsuffix_check(TParseContext* context)
{
    struct yyguts_t* yyg = (struct yyguts_t*) context->getScanner();

    if (context->getShaderVersion() < 300)
    {
        context->error(*yylloc, "Floating-point suffix unsupported prior to GLSL ES 3.00", yytext);
        context->recover();
        return 0;
    }

    std::string text = yytext;
    text.resize(text.size() - 1);
    if (!strtof_clamp(text, &(yylval->lex.f)))
        yyextra->warning(*yylloc, "Float overflow", yytext, "");

    return(FLOATCONSTANT);
}

void yyerror(YYLTYPE* lloc, TParseContext* context, void *scanner, const char* reason) {
    context->error(*lloc, reason, yyget_text(scanner));
    context->recover();
}

int int_constant(TParseContext *context) {
    struct yyguts_t* yyg = (struct yyguts_t*) context->getScanner();

    unsigned int u;
    if (!atoi_clamp(yytext, &u))
    {
        if (context->getShaderVersion() >= 300)
            yyextra->error(*yylloc, "Integer overflow", yytext, "");
        else
            yyextra->warning(*yylloc, "Integer overflow", yytext, "");
    }
    yylval->lex.i = static_cast<int>(u);
    return INTCONSTANT;
}

int float_constant(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!strtof_clamp(yytext, &(yylval->lex.f)))
        yyextra->warning(*yylloc, "Float overflow", yytext, "");
    return FLOATCONSTANT;
}

int glslang_initialize(TParseContext* context) {
    yyscan_t scanner = NULL;
    if (yylex_init_extra(context,&scanner))
        return 1;

    context->setScanner(scanner);
    return 0;
}

int glslang_finalize(TParseContext* context) {
    yyscan_t scanner = context->getScanner();
    if (scanner == NULL) return 0;
    
    context->setScanner(NULL);
    yylex_destroy(scanner);

    return 0;
}

int glslang_scan(size_t count, const char* const string[], const int length[],
                 TParseContext* context) {
    yyrestart(NULL,context->getScanner());
    yyset_column(0,context->getScanner());
    yyset_lineno(1,context->getScanner());

    // Initialize preprocessor.
    pp::Preprocessor *preprocessor = &context->getPreprocessor();

    if (!preprocessor->init(count, string, length))
        return 1;

    // Define extension macros.
    const TExtensionBehavior& extBehavior = context->extensionBehavior();
    for (TExtensionBehavior::const_iterator iter = extBehavior.begin();
         iter != extBehavior.end(); ++iter) {
        preprocessor->predefineMacro(iter->first.c_str(), 1);
    }
    if (context->getFragmentPrecisionHigh())
        preprocessor->predefineMacro("GL_FRAGMENT_PRECISION_HIGH", 1);

    preprocessor->setMaxTokenSize(GetGlobalMaxTokenSize(context->getShaderSpec()));

    return 0;
}

}  // namespace opengl
}  // namespace frontend
}  // namespace gfx

